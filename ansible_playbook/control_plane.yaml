---
- name: playbook to install the SteamCMD cli client and CSGO server
  hosts: localhost
  tasks:
    - name: use apt to update its cache
      become: yes
      apt:
        update_cache: yes
    - name: install setfacl
      become: yes
      apt:
        update_cache: true
        package: acl
    - name: disable swap
      block:
        - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
          shell: |
            swapoff -a
        - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
          replace:
            path: /etc/fstab
            regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
            replace: '# \1'
    - name: Install docker-ce as container runtime
      # https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd
      block:      
        - name: install pkgs to allow apt to use a repository over HTTPS
          become: yes
          apt:
            update_cache: true
            package: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg2']
        - name: Add docker-ce keyring
          become: yes
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            keyring: /usr/share/keyrings/docker-archive-keyring.gpg
        - name: Add docker-ce repo
          become: yes
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
        - name: install docker-ce
          become: yes
          apt:
            update_cache: true
            # TODO do I need anything other than 'containerd.io' ?
            # package: ['docker-ce', 'docker-ce-cli', 'containerd.io', 'docker-buildx-plugin', 'docker-compose-plugin']
            package: containerd.io
#        - name: Adding ansible user to group docker
#          become: yes
#          user: 
#            name: ansible
#            groups: docker
#            append: yes
        - name: generate /etc/containerd/config.toml
          become: yes
          block:
            - name: generate the default content for /etc/containerd/config.toml
              ansible.builtin.command: containerd config default
              register: containerd_config_toml
            - name: write the content for /etc/containerd/config.toml
              ansible.builtin.copy:
                content: "{{containerd_config_toml.stdout}}"
                dest: /etc/containerd/config.toml
            - name: Enable SystemdCgroup in /etc/containerd/config.toml
              # https://kubernetes.io/docs/setup/production-environment/container-runtimes/
              ansible.builtin.lineinfile:
                path: /etc/containerd/config.toml
                regexp: 'SystemdCgroup = false'
                line: '            SystemdCgroup = true'
            - name: apply changes to containerd, by restarting containerd
              # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html
              ansible.builtin.service:
                name: containerd
                state: restarted

    - name: Install and configure prerequisites
      # https://kubernetes.io/docs/setup/production-environment/container-runtimes/
      become: yes
      block:
        - name: write /etc/modules-load.d/k8s.conf
          ansible.builtin.copy:
            dest: /etc/modules-load.d/k8s.conf
            content: "overlay\nbr_netfilter\n"
        - name: load the overlay module
          # TODO may need: ansible-galaxy collection install community.general
          community.general.modprobe:
            name: overlay
            state: present
        - name: load the br_netfilter module
          community.general.modprobe:
            name: br_netfilter
            state: present
        - name: write /etc/sysctl.d/k8s.conf
          ansible.builtin.copy:
            dest: /etc/sysctl.d/k8s.conf
            content: "net.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\n"
          register: sysctl_conf
        - name: apply /etc/sysctl.d/k8s.conf
          shell: sysctl -p --system
          become: yes
          when: sysctl_conf.changed

    - name: Install kubeernetes apps
      become: yes
      block:      
        - name: install pkgs to allow apt to use a repository over HTTPS
          become: yes
          apt:
            update_cache: true
            package: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg2']
        - name: Add kubernetes {{ kubernetes_version }} keyring
          become: yes
          ansible.builtin.apt_key:
            url: https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key
            keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        - name: Add docker-ce repo
          become: yes
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /"
            filename: /etc/apt/sources.list.d/kubernetes.list
            state: present
        - name: install kubelet kubeadm kubectl
          become: yes
          apt:
            update_cache: true
            package: ['kubeadm', 'kubectl', 'kubelet']
        - name: Hold kubeadm
          ansible.builtin.dpkg_selections:
            name: kubeadm
            selection: hold
        - name: Hold kubectl
          ansible.builtin.dpkg_selections:
            name: kubectl
            selection: hold
        - name: Hold kubelet
          ansible.builtin.dpkg_selections:
            name: kubelet
            selection: hold

    - name: install some necessary software
      become: yes
      apt:
        update_cache: true
        package: ['lsb-release', 'software-properties-common', 'uidmap', 'vim','wget']
    - name: kubeadm init
      become: yes
      block:
        - name: run kubeadm init
          ansible.builtin.command:
          args:
            cmd: kubeadm init
            creates: /etc/kubernetes/admin.conf
          register: kubeadm_init
        - name: write the content kubeadm init output to /home/ansible/kubeadm_init.log
          ansible.builtin.copy:
            content: "{{kubeadm_init.stdout}}"
            dest: /home/ansible/kubeadm_init.log
        - name: create .kube directory
          become: yes
          become_user: ansible
          ansible.builtin.file:
            path: /home/ansible/.kube
            state: directory
            mode: '0755'
        - name: read admin.conf
          ansible.builtin.command:
          args:
            cmd: cat /etc/kubernetes/admin.conf
          register: kube_conf
        - name: write admin.conf
          ansible.builtin.copy:
            content: "{{kube_conf.stdout}}"
            dest: /home/ansible/.kube/config
            owner: ansible
            group: ansible
            mode: '0600'
        - name: install CNI(weavenet)
          become_user: ansible
          ansible.builtin.command:
          args:
            cmd: kubectl apply -f /home/ansible/cni_weavenet_deamonset.yaml
            creates: /opt/cni/bin/weave-net
